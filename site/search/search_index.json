{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Manga-G Explore the docs \u00bb Report Bug \u00b7 Request Feature An awesome CLI program to read Manga via Terminal! Github: github.com/4cecoder/manga-g Website: mg.test.whinyaan.xyz To be updated, be sure to watch this repository and join the Discord Support Server . For the terms of usage and legals, visit LICENSE and terms of usage & disclaimer . Downloads Since people are looking for the download first, here you go: Follow this link to install Manga-G on your machine. About Manga-G leverages Golang's multithreading to be able to hit multiple manga sites' APIs at a blazinng speed while dynamically aggregating the results, giving you the LEETEST Manga reading experience that feels like starcraft. Features Written for your terminal Written with Go programming language Supported OSes Windows MacOS Linux; and Others Usage Before using this project, it is recommended to visit license and terms of usage & disclaimer for the terms of usage, disclaimer, and legals. For help, run the following command: ./MangaG Downloading: ./MangaG <url> [ OPTIONS ] For programmatic use, visit the documentation License MIT Copyright for portions of project Manga-G are held . All other copyright for project Manga-G are held by [Github Account 4cecoder Owner, 2022]. Check the license for more details. Acknowledgments Charm Suite From little cli application to an Unforgetable Experience Like visiting Disney World!... > But in your terminal Other Tools Used Warp Goland Related Projects Like this application? Consider using related projects: mangodl MangDL Manga-py Tachiyomi Hakuneko Manga Desk Have a similar project to this application too? Do not hesitate to make a pull request and add it here! Credits Thank you To the sole sponsor of this project: To everyone who supported this project from its humble beginnings to its release! README whi_ne has been paid to help with this project, and started with this README. But she's just starting, so expect more! Want help in your projects too? Inquire through Discord( whi_ne | whinyaan.xyz#5135 ) or through e-mail( whinyaan@protonmail.com ). Price starts at 40 USD. For commisioning projects, price starts at 20 USD. MIT Logo Massachusetts Institute of Technology (vectorized by Mysid , modified by whinee ), Public domain, via Wikimedia Commons Icons Exclamation Mark , Code Fork , Star , Group , Code , Windows XP , Mac Client , and Linux icons by Icons8 ( back to top )","title":"Home"},{"location":"#downloads","text":"Since people are looking for the download first, here you go: Follow this link to install Manga-G on your machine.","title":"Downloads"},{"location":"#about","text":"Manga-G leverages Golang's multithreading to be able to hit multiple manga sites' APIs at a blazinng speed while dynamically aggregating the results, giving you the LEETEST Manga reading experience that feels like starcraft.","title":"About"},{"location":"#features","text":"Written for your terminal Written with Go programming language","title":"Features"},{"location":"#supported-oses","text":"Windows MacOS Linux; and Others","title":"Supported OSes"},{"location":"#usage","text":"Before using this project, it is recommended to visit license and terms of usage & disclaimer for the terms of usage, disclaimer, and legals. For help, run the following command: ./MangaG Downloading: ./MangaG <url> [ OPTIONS ] For programmatic use, visit the documentation","title":"Usage"},{"location":"#license","text":"","title":"License"},{"location":"#mit","text":"Copyright for portions of project Manga-G are held . All other copyright for project Manga-G are held by [Github Account 4cecoder Owner, 2022]. Check the license for more details.","title":"MIT"},{"location":"#acknowledgments","text":"","title":"Acknowledgments"},{"location":"#charm-suite","text":"From little cli application to an Unforgetable Experience Like visiting Disney World!... > But in your terminal","title":"Charm Suite"},{"location":"#other-tools-used","text":"Warp Goland","title":"Other Tools Used"},{"location":"#related-projects","text":"Like this application? Consider using related projects: mangodl MangDL Manga-py Tachiyomi Hakuneko Manga Desk Have a similar project to this application too? Do not hesitate to make a pull request and add it here!","title":"Related Projects"},{"location":"#credits","text":"","title":"Credits"},{"location":"#thank-you","text":"To the sole sponsor of this project: To everyone who supported this project from its humble beginnings to its release!","title":"Thank you"},{"location":"#readme","text":"whi_ne has been paid to help with this project, and started with this README. But she's just starting, so expect more! Want help in your projects too? Inquire through Discord( whi_ne | whinyaan.xyz#5135 ) or through e-mail( whinyaan@protonmail.com ). Price starts at 40 USD. For commisioning projects, price starts at 20 USD.","title":"README"},{"location":"#mit-logo","text":"Massachusetts Institute of Technology (vectorized by Mysid , modified by whinee ), Public domain, via Wikimedia Commons","title":"MIT Logo"},{"location":"#icons","text":"Exclamation Mark , Code Fork , Star , Group , Code , Windows XP , Mac Client , and Linux icons by Icons8 ( back to top )","title":"Icons"},{"location":"changelog/","text":"Changelog 0.0.0.0-alpha.0 Initial release of the application","title":"Changelog"},{"location":"license/","text":"MIT LICENSE Copyright for portions of project Manga-G are held . All other copyright for project Manga-G are held by [Github Account 4cecoder Owner, 2022]. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"notes%20to%20self/","text":"Notes to Self Look, whi_ne, I have written this for you. Please, do I humbly plead you, do not ever forgot to read this before pushing changes to Github. There is also a professional version of this notes here . Versioning System Look, you have made your own versioning system based off semver 2.0.0. Use it properly. Given a version number user.dev.minor.patch , increment the: user version when you make any changes to the user interface/experience. This does not include improvements on loading times, despite being well within the user experience umbrella. dev version when you make incompatible API changes, minor version when you add functionality in a backwards compatible manner, and patch version when you make backwards compatible bug fixes. If in doubt, please DO visit semver.org . Version Bump Guides ANY change in the user interface/experience SHALL induce a user version bump. ANY change in the schema shall induce a dev version bump. ANY change in the documentation SHALL NOT induce any version bump. flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0 Changelog As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added for new features. user dev minor Changed for changes in existing functionality. user dev Deprecated for soon-to-be removed features. patch Removed for now removed features. user dev Fixed for any bug fixes. Security in case of vulnerabilities. Mind the human as you do with the robot. Format the changelog properly. Example format: ## 69.4.2.0 (minor bump) Sprinkle a description here. ### Added - I added a cool feature. ### Deprecated - This feature will be depracated 'cuz I can't maintain it anymore. ### Security - Fixed stuff where the anilist token is leaked to everyone using this app. Documentation The documentation system is a custom solution. If the documentation generator fails, check the traceback. It is commonly due to errors in the code and not the generator itself. Do not blame the shitty generator you wrote. You might just have written a faulty code.","title":"Notes to self"},{"location":"notes%20to%20self/#versioning-system","text":"Look, you have made your own versioning system based off semver 2.0.0. Use it properly. Given a version number user.dev.minor.patch , increment the: user version when you make any changes to the user interface/experience. This does not include improvements on loading times, despite being well within the user experience umbrella. dev version when you make incompatible API changes, minor version when you add functionality in a backwards compatible manner, and patch version when you make backwards compatible bug fixes. If in doubt, please DO visit semver.org .","title":"Versioning System"},{"location":"notes%20to%20self/#version-bump-guides","text":"ANY change in the user interface/experience SHALL induce a user version bump. ANY change in the schema shall induce a dev version bump. ANY change in the documentation SHALL NOT induce any version bump. flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0","title":"Version Bump Guides"},{"location":"notes%20to%20self/#changelog","text":"As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added for new features. user dev minor Changed for changes in existing functionality. user dev Deprecated for soon-to-be removed features. patch Removed for now removed features. user dev Fixed for any bug fixes. Security in case of vulnerabilities. Mind the human as you do with the robot. Format the changelog properly. Example format: ## 69.4.2.0 (minor bump) Sprinkle a description here. ### Added - I added a cool feature. ### Deprecated - This feature will be depracated 'cuz I can't maintain it anymore. ### Security - Fixed stuff where the anilist token is leaked to everyone using this app.","title":"Changelog"},{"location":"notes%20to%20self/#documentation","text":"The documentation system is a custom solution. If the documentation generator fails, check the traceback. It is commonly due to errors in the code and not the generator itself. Do not blame the shitty generator you wrote. You might just have written a faulty code.","title":"Documentation"},{"location":"notes/","text":"Notes There is a more personal version of this notes here . Versioning System Hyaku uses modified semver. This is due to the fact that I believe that I, the developer of this app, introduces too much breaking change to the API without noticeable changes to the user interface and/or experience. And such, I have decided to use the following versioning system: Given a version number user.dev.minor.patch , increment the: major version when you make incompatible API changes. minor version when you add functionality in a backwards compatible manner; and patch version when you make backwards compatible bug fixes. Anything else adheres to the semantic versioning 2.0.0. If in doubt, please do not hesitate to visit semver.org . flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0 Changelog As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added for new features. major minor Changed for changes in existing functionality. major Deprecated for soon-to-be removed features. patch Removed for now removed features. major Fixed for any bug fixes. Security in case of vulnerabilities. Example format: ## 1.0.0-rc.1 (pre-release identifier bump) Concisely describe changes in this release. ### Added - List additions here. Documentation The documentation system is a custom solution. Documenting it will be futile, as it is ever-changing, tuned to the developer's needs.","title":"Notes"},{"location":"notes/#versioning-system","text":"Hyaku uses modified semver. This is due to the fact that I believe that I, the developer of this app, introduces too much breaking change to the API without noticeable changes to the user interface and/or experience. And such, I have decided to use the following versioning system: Given a version number user.dev.minor.patch , increment the: major version when you make incompatible API changes. minor version when you add functionality in a backwards compatible manner; and patch version when you make backwards compatible bug fixes. Anything else adheres to the semantic versioning 2.0.0. If in doubt, please do not hesitate to visit semver.org . flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0","title":"Versioning System"},{"location":"notes/#changelog","text":"As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added for new features. major minor Changed for changes in existing functionality. major Deprecated for soon-to-be removed features. patch Removed for now removed features. major Fixed for any bug fixes. Security in case of vulnerabilities. Example format: ## 1.0.0-rc.1 (pre-release identifier bump) Concisely describe changes in this release. ### Added - List additions here.","title":"Changelog"},{"location":"notes/#documentation","text":"The documentation system is a custom solution. Documenting it will be futile, as it is ever-changing, tuned to the developer's needs.","title":"Documentation"},{"location":"readme/","text":"Docs go here bruh","title":"Docs go here bruh"},{"location":"readme/#docs-go-here-bruh","text":"","title":"Docs go here bruh"},{"location":"docs/0/0/","text":"0.0 How to install Manga-G How the config file works How the app initializes after running for the first time","title":"Index"},{"location":"docs/0/0/config/","text":"Configurations Config File Config File Lookup Order of Precedence (CFLOP) MangaG is a cross-compatible project, which means that it could be ran in different OS. There is however a lack of unity in the standardization on the location of config files in this OSes. And such, I have devised a precedence order for MangaG's config file in different platforms. The following are the CFLOP for different OSes: flowchart TD A([CFLOP]) --> L[--config argument] L --> B{OS?} B --> |*nix| C[./MangaG.yml] subgraph <br> C --> D{\"XDG<br>CONFIG<br>HOME<br>(XCH)?\"} D --> |true| E[\"${XCH}/MangaG/config.yml\"] --> F D --> |false| F[\"~/.config/MangaG/config.yml\"] F --> G[\"~/.hyk\"] G --> H[\"/etc/xdg/MangaG/config.yml\"] H --> I[\"/etc/MangaG/config.yml\"] end B --> |Windows| J[.\\MangaG.yml] subgraph <br><br> J --> K[\"${boot drive}:\\\\<br>Users\\${username}\\<br>AppData\\Roaming\\MangaG\\<br>config.yml\"] end","title":"Config"},{"location":"docs/0/0/config/#config-file","text":"","title":"Config File"},{"location":"docs/0/0/config/#config-file-lookup-order-of-precedence-cflop","text":"MangaG is a cross-compatible project, which means that it could be ran in different OS. There is however a lack of unity in the standardization on the location of config files in this OSes. And such, I have devised a precedence order for MangaG's config file in different platforms. The following are the CFLOP for different OSes: flowchart TD A([CFLOP]) --> L[--config argument] L --> B{OS?} B --> |*nix| C[./MangaG.yml] subgraph <br> C --> D{\"XDG<br>CONFIG<br>HOME<br>(XCH)?\"} D --> |true| E[\"${XCH}/MangaG/config.yml\"] --> F D --> |false| F[\"~/.config/MangaG/config.yml\"] F --> G[\"~/.hyk\"] G --> H[\"/etc/xdg/MangaG/config.yml\"] H --> I[\"/etc/MangaG/config.yml\"] end B --> |Windows| J[.\\MangaG.yml] subgraph <br><br> J --> K[\"${boot drive}:\\\\<br>Users\\${username}\\<br>AppData\\Roaming\\MangaG\\<br>config.yml\"] end","title":"Config File Lookup Order of Precedence (CFLOP)"},{"location":"docs/0/0/installation/","text":"If you have Go but NOT 1.18+ then Modify the go.mod file to your currently installed go base version number For example, I have go 1.18.1 installed but in the go mod I only need to write 1.18 Don't have Go programming language? Let's FIX DAT Debian/Ubuntu/Mint/etc.: sudo apt-get install golang-go MacOS: brew install go OR (For advanced users) Manual Install (linux) commands wget https://go.dev/dl/go1.18.2.linux-amd64.tar.gz rm -rf /usr/local/go && tar -C /usr/local -xzf go1.18.2.linux-amd64.tar.gz export PATH=$PATH:/usr/local/go/bin go version For other operating systems https://go.dev/doc/install Terminal commands for project setup and run This command gets the Manga-G code \"FROM UP OFF DA HUB\" git clone https://github.com/4cecoder/manga-g This command takes you into the project folder cd manga-g Checking if there are any problems before running go mod tidy && go mod vendor This command goes into the run folder and tries to run the program cd cmd/core && go run main.go go build main.go && mv main MangaG","title":"Installation"},{"location":"docs/0/0/installation/#if-you-have-go-but-not-118-then","text":"Modify the go.mod file to your currently installed go base version number For example, I have go 1.18.1 installed but in the go mod I only need to write 1.18","title":"If you have Go but NOT 1.18+ then"},{"location":"docs/0/0/installation/#dont-have-go-programming-language-lets-fix-dat","text":"","title":"Don't have Go programming language? Let's FIX DAT"},{"location":"docs/0/0/installation/#debianubuntumintetc-sudo-apt-get-install-golang-go","text":"","title":"Debian/Ubuntu/Mint/etc.: sudo apt-get install golang-go"},{"location":"docs/0/0/installation/#macos-brew-install-go","text":"","title":"MacOS: brew install go"},{"location":"docs/0/0/installation/#or-for-advanced-users","text":"Manual Install (linux) commands","title":"OR (For advanced users)"},{"location":"docs/0/0/installation/#wget-httpsgodevdlgo1182linux-amd64targz","text":"","title":"wget https://go.dev/dl/go1.18.2.linux-amd64.tar.gz"},{"location":"docs/0/0/installation/#rm-rf-usrlocalgo-tar-c-usrlocal-xzf-go1182linux-amd64targz","text":"","title":"rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.18.2.linux-amd64.tar.gz"},{"location":"docs/0/0/installation/#export-pathpathusrlocalgobin","text":"","title":"export PATH=$PATH:/usr/local/go/bin"},{"location":"docs/0/0/installation/#go-version","text":"","title":"go version"},{"location":"docs/0/0/installation/#for-other-operating-systems","text":"https://go.dev/doc/install","title":"For other operating systems"},{"location":"docs/0/0/installation/#terminal-commands-for-project-setup-and-run","text":"","title":"Terminal commands for project setup and run"},{"location":"docs/0/0/installation/#this-command-gets-the-manga-g-code-from-up-off-da-hub","text":"","title":"This command gets the Manga-G code \"FROM UP OFF DA HUB\""},{"location":"docs/0/0/installation/#git-clone-httpsgithubcom4cecodermanga-g","text":"","title":"git clone https://github.com/4cecoder/manga-g"},{"location":"docs/0/0/installation/#this-command-takes-you-into-the-project-folder","text":"","title":"This command takes you into the project folder"},{"location":"docs/0/0/installation/#cd-manga-g","text":"","title":"cd manga-g"},{"location":"docs/0/0/installation/#checking-if-there-are-any-problems-before-running","text":"","title":"Checking if there are any problems before running"},{"location":"docs/0/0/installation/#go-mod-tidy-go-mod-vendor","text":"","title":"go mod tidy &amp;&amp; go mod vendor"},{"location":"docs/0/0/installation/#this-command-goes-into-the-run-folder-and-tries-to-run-the-program","text":"","title":"This command goes into the run folder and tries to run the program"},{"location":"docs/0/0/installation/#cd-cmdcore-go-run-maingo","text":"","title":"cd cmd/core &amp;&amp; go run main.go"},{"location":"docs/0/0/installation/#go-build-maingo-mv-main-mangag","text":"","title":"go build main.go &amp;&amp; mv main MangaG"},{"location":"docs/0/0/setup/","text":"Setup flowchart LR A([Config]) --> B[Grab CFLOP] B --> C{Last item} C --> |false| D{File exists?} D --> |true| E([Read config file]) D --> |false| C C --> |true| F{OS?} F --> |Windows| G[Initialize config file<br>at first lookup path] --> E F --> |*nix| H{.AppImage?} H --> |true| I[Initialize config file<br>at second lookup path] --> E H --> |false| G","title":"Setup"},{"location":"docs/0/0/structure/","text":"Program Structure MangaG is a very basic application, yet it grew to a large size. As a one-man army, it is necessary for me to write this, as to not get lost in this chaos that I have created. I, however, procrastinated in writing this, and thus, is completely empty at the moment.","title":"Structure"}]}